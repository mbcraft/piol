<?php

/**
 * This file contains the FileSystemUtils class. It contains only static helper methods
 * used for checking file system stuff.
 * 
 * Some help from :
 * http://stackoverflow.com/questions/1976007/what-characters-are-forbidden-in-windows-and-linux-directory-names
 * http://stackoverflow.com/users/22437/dour-high-arch
 * https://msdn.microsoft.com/en-us/library/aa365247
 */

namespace Mbcraft\Piol {

    /**
     * This class contains various file system utility static methods : checking for total
     * and available disk space, file name validation and file and directory identification.
     */
    class FileSystemUtils extends PiolObject {
        
        /**
         * This methods checks if a path ends with slash.
         * 
         * @param string $path The path to check
         * @return boolean true if the path ends with a slash, false otherwise.
         */
        private static function endingWithSlash($path) {
            if (substr($path, strlen($path)-1)!=DIRECTORY_SEPARATOR)
                return $path.DIRECTORY_SEPARATOR;
            else 
                return $path;
        }
        /**
         * Gets the value of the root path jail directory used in this library.
         * 
         * @return string The path of the root jail dir.
         * @throws Exception If PIOL_ROOT_PATH is not configured and _ENV["PIOL_ROOT_PATH"] is not configured too.
         */
        public static function getPiolRootPath() {
            
            //environment variable
            if (isset($_ENV["PIOL_ROOT_PATH"])) {
                if ($_ENV["PIOL_ROOT_PATH"]==false)
                    throw new \Exception('$_ENV["PIOL_ROOT_PATH"] is empty.');
                return self::endingWithSlash($_ENV["PIOL_ROOT_PATH"]);
            }
                        
            //laravel fallback
            if (function_exists("config") && function_exists("base_path")) {
                return self::endingWithSlash(config("filesystems.PIOL_ROOT_PATH", base_path()));
            }
            
            //php constant
            if (defined("PIOL_ROOT_PATH")) {
                if (PIOL_ROOT_PATH==false)
                    throw new \Exception("PIOL_ROOT_PATH constant is empty.");
                return self::endingWithSlash(PIOL_ROOT_PATH);
            }
            throw new \Exception("Unable to determine the root jail directory to use for this library.");
        }
        
        /**
         * Checks if the constant PIOL_ROOT_PATH or $_ENV["PIOL_ROOT_PATH"] is defined. If not it is defined, defines it
         * using the $_SERVER["SCRIPT_NAME"] and $_SERVER["SCRIPT_FILENAME"] environment variables.
         */
        public static function checkPiolRootPath() {
            if (!defined("PIOL_ROOT_PATH") && !isset($_ENV["PIOL_ROOT_PATH"]))
            {
                //imposta l'include path in modo assoluto per la root del sito
                $real_script_name = str_replace("\\",DIRECTORY_SEPARATOR,$_SERVER['SCRIPT_NAME']);
                $piol_root_path = str_replace($real_script_name, "", $_SERVER['SCRIPT_FILENAME']);
                define("PIOL_ROOT_PATH",$piol_root_path);
            }
        }

        /**
         * 
         * Returns true if the specified name is the current folder path specifier, false otherwise.
         * 
         * @param string $name the name to check
         * @return boolean true if it is the current dir specifier (.), false otherwise.
         * 
         * @api
         */
        public static function isCurrentDirName($name) {
            return $name == DOT;
        }

        /**
         * 
         * Returns true if the specified name is the parent folder path specifier, false otherwise.
         * 
         * @param string $name the name to check.
         * @return boolean true if it is the parent dir specifier (..), false otherwise.
         * 
         * @api
         */
        public static function isParentDirName($name) {
            return $name == DOT.DOT;
        }
        
        /**
         * 
         * Checks if the specified filename is a valid filename.
         * 
         * @param string $filename the name to check
         * 
         * @api
         */
        public static function isValidFilename($filename) {
            static $FORBIDDEN_NAMES = ["COM","PRN","AUX","NUL","COM1","COM2","COM3","COM4","COM5","COM6","COM7","COM8","COM9","LPT1","LPT2","LPT3","LPT4","LPT5","LPT6","LPT7","LPT8","LPT9"];
            foreach ($FORBIDDEN_NAMES as $prefix) {
                if (($filename == $prefix) || (strpos($filename,$prefix.".")===0)) 
                        return false;
            }
            $result = preg_match("/.*[\<\>\:\"\/\|\?\*]+.*/",$filename) || self::isCurrentDirName($filename) || self::isParentDirName($filename);
            return !$result;
        }
        
        /**
         * 
         * Checks if a file name is valid. If not, throws an IOException.
         * 
         * @param string $filename The name to check
         * @throws \Mbcraft\Piol\IOException If the name is not valid.
         * 
         * @api
         */
        public static function checkValidFilename($filename) {
            if (!self::isValidFilename($filename)) {
                throw new IOException("The filename is not valid : ".$filename);
            }
        }

        /**
         * 
         * Checks if the specified path is a valid file path.
         * 
         * @param string $path the path to check as a string
         * @return boolean true if it is a valid file path, false otherwise.
         * 
         * @api
         */
        public static function isFile($path) {
            return is_file(FileSystemUtils::getPiolRootPath() . $path);
        }

        /**
         * 
         * Checks if the specified path is a valid directory path.
         * 
         * @param string $path the path to check as a string
         * @return boolean true if it is a valid directory path, false otherwise.
         * 
         * @api
         */
        public static function isDir($path) {
            return is_dir(FileSystemUtils::getPiolRootPath() . $path);
        }

        /**
         * 
         * Returns the available disk space inside the piol root path.
         * 
         * @return long the available number of bytes of disk space.
         * 
         * @api
         */
        public static function getFreeDiskSpace() {
            return disk_free_space(FileSystemUtils::getPiolRootPath());
        }

        /**
         * 
         * Returns the total disk space inside the piol root path.
         * 
         * @return long the total number of bytes of disk space.
         * 
         * @api
         */
        public static function getTotalDiskSpace() {
            return disk_total_space(FileSystemUtils::getPiolRootPath());
        }
        
        /**
         * Clears a path removing double slashes and making it absolute.
         * 
         * @param string $path The path to clear
         * 
         * @return The cleaned path (no double slashes, absolute path).
         */
        public static function getCleanedPath($path) {
            //SAFETY NET, rimuovo tutti i .. all'interno del percorso.
            $path = str_replace(DS . "..", "", $path);
            //pulizia doppie barre dai percorsi
            $path = str_replace("//", DS, $path);
            
            
            return $path;
        }
        
        /**
         * Replaces quotes and double quotes inside path part with underscores.
         * 
         * @param type $path_part
         */
        public static function filterPathName($path_part) { 
            $path_part = str_replace('\ ','_',$path_part);
            $path_part = str_replace('\'','_',$path_part);
            $path_part = str_replace('"','_',$path_part);
            $path_part = str_replace(' ','_',$path_part);
            $path_part = str_replace('(','_',$path_part);
            $path_part = str_replace(')','_',$path_part);
            $path_part = str_replace('[','_',$path_part);
            $path_part = str_replace(']','_',$path_part);
            $path_part = str_replace('{','_',$path_part);
            $path_part = str_replace('}','_',$path_part);
            $path_part = str_replace('$','_',$path_part);
            $path_part = str_replace('%','_',$path_part);
            $path_part = str_replace('&','_',$path_part);
            $path_part = str_replace('?','_',$path_part);
            $path_part = str_replace('!','_',$path_part);
            $path_part = str_replace(':','_',$path_part);
            $path_part = str_replace('-','_',$path_part);
            return $path_part;
        }
        
    }

}

?>
