<?php
/**
 * This file contains the FlatDirCache class definition.
 */
namespace Mbcraft\Piol\Cache {  

    use \Mbcraft\Piol\PiolObject;
    use \Mbcraft\Piol\Dir;
    use \Mbcraft\Piol\IOException;
    /**
     * This class can be used for caching data in a flat folder fashion.
     * It uses as a directory for storing all the cache entries (actually 'PIOL_ROOT_PATH'/tmp/cache/ as a default folder).
     * See the ICache interface definition for more details.
     */
    class FlatDirCache extends PiolObject implements ICache {
        
        /**
         * The default cache file extension is ".key"
         */
        const DEFAULT_CACHE_FILE_EXTENSION = ".key";
        /**
         * The default cache entry expire time is 1 day = 86400 seconds.
         */
        const DEFAULT_ENTRY_EXPIRE_TIME = 86400; 
        /**
         * The default garbage collection interval is 1 hour = 3600 seconds.
         */
        const DEFAULT_GARBAGE_COLLECTION_INTERVAL = 3600; 
        
        /**
         * The default cache directory is "/tmp/cache", relative to the PIOL_ROOT_PATH.
         */
        const DEFAULT_ROOT_DIR = "/tmp/cache";

        /**
         * 
         * @var int Contains the cache entries expire time, in seconds. 
         * 
         * @internal
         */
        private $entry_expire_time = self::DEFAULT_ENTRY_EXPIRE_TIME;
        
        /**
         * 
         * @var Dir Contains the root dir of this cache, as a string.
         * 
         * @internal
         */
        private $root_dir = null;
        
        /**
         * 
         * @var int Contains the garbage collection interval of this cache. 
         * 
         * @internal
         */
        private $garbage_collection_interval = self::DEFAULT_GARBAGE_COLLECTION_INTERVAL;
        
        /**
         * 
         * @var long Contains the last gatbage collection unix timestamp. 
         * 
         * @internal
         */
        private $last_garbage_collection_time = null;

        /**
         * 
         * Construct a FlatDirCache instance, using the specified parameter as folder for data.
         * 
         * @param \Mbcraft\Piol\Dir|string $cache_dir the cache directory or string path for the cache data.
         * 
         * @api
         */
        public function __construct($cache_dir) {
            $this->root_dir = Dir::asDir($cache_dir);
        }
        
        /**
         * 
         * Gets the cache entry expire time, in seconds.
         * 
         * @return int the cache entry expire time, in seconds.
         * 
         * @api
         */
        public function get_entry_expire_time() {
            return $this->entry_expire_time;
        }
        
        /**
         *
         * Sets the cache entry expire time, in seconds.
         * 
         * @param int $expire_seconds the new cache entry expire time.
         * 
         * @api
         */
        public function set_entry_expire_time($expire_seconds) {
            $this->entry_expire_time = $expire_seconds;
        }

        /**
         * 
         * Gets the garbage collection interval, after with a garbage collection
         * is forces.
         * 
         * @return int the garbage collection interval, in seconds.
         * 
         * @api
         */
        public function get_garbage_collection_interval() {
            return $this->garbage_collection_interval;
        }

        /**
         * 
         * Sets the garbage collection interval, after with a garbage collection
         * is forced, in seconds.
         * 
         * @param int $interval_seconds the new garbage collection interval.
         * 
         * @api
         */
        public function set_garbage_collection_interval($interval_seconds) {
            $this->garbage_collection_interval = $interval_seconds;
        }

        /**
         * Initializes the cache. It is called before each cache access.
         */
        function init() {
            if ($this->root_dir === null)
                $this->set_root_dir(self::DEFAULT_ROOT_DIR);

            if (!$this->root_dir->exists())
                $this->root_dir->touch();

            if (time() - $this->last_garbage_collection_time > self::DEFAULT_GARBAGE_COLLECTION_INTERVAL)
                $this->garbage_collect();
        }

        /**
         * Executes garbage collection of cache entries. Should be called automatically
         * when garbage_collection_interval time passes after the last garbage collection.
         */
        function garbage_collect() {
            $this->last_garbage_collection_time = time();

            $results = $this->root_dir->listElements();
            $all_elements = array_merge($results[0],$results[1]);

            foreach ($all_elements as $f) {
                if (time() - $f->getLastAccessTime() > $this->entry_expire_time)
                    $f->delete();
            }
        }

        /**
         * 
         * Deletes all the cache entries.
         * 
         * @api
         */
        public function clean_cache() {
            $this->init();
            $results = $this->root_dir->listElements();
            $all_elements = array_merge($results[0],$results[1]);
            
            foreach ($all_elements as $f)
                $f->delete();
        }

        /**
         * 
         * Returns the existence of a cache entry. An entry expires if not accessed
         * after the *entry_expire_time*. If an entry exists it can always be accessed
         * with get, set or delete_key. Always check an entry before accessing.
         * 
         * @param string $key the key of the entry to access.
         * @return boolean true if the entry exists and is readable, false otherwise.
         * 
         * @api
         */
        public function has_key($key) {
            $this->init();

            $file = $this->root_dir->newFile($key . self::DEFAULT_CACHE_FILE_EXTENSION);
             
            if ($file->exists()) {
                if (time() - $file->getLastAccessTime() > $this->entry_expire_time) {
                    $file->delete();
                    return false;
                }
                return true;
            }
            return false;
                
        }

        /**
         * 
         * Returns the content of an entry as a string. 
         * The cache entry expire time is reset for this entry.
         * If the entry with this key does not exists this method throws an IOException.
         * 
         * @param string $key the string key of the entry to read
         * @return string the content of the entry as a string
         * @throws \Mbcraft\Piol\IOException if the entry is expired or does not exist.
         * 
         * @api
         */
        public function get($key) {
            $this->init();

            $f = $this->root_dir->newFile($key. self::DEFAULT_CACHE_FILE_EXTENSION);

            if ($f->exists()) 
                return $f->getContent();
            else
                throw new IOException("Cache element not found!!");
        }

        /**
         * 
         * Sets a cache entry with the string content passed as a parameter.
         * The cache entry expire time is reset.
         * @param string $key the entry key.
         * @param string $content the entry content as a string.
         * 
         * @api
         */
        public function set($key, $content) {
            $this->init();

            $f = $this->root_dir->newFile($key . self::DEFAULT_CACHE_FILE_EXTENSION);

            $f->setContent($content);
        }

        /**
         * 
         * Deletes the cache entry with the specified key. If the entry does not exist nothing is done.
         * 
         * @param string $key the key of the entry.
         * 
         * @api
         */
        public function delete_key($key) {
            $this->init();

            $f = $this->root_dir->newFile($key. self::DEFAULT_CACHE_FILE_EXTENSION);

            if ($f->exists()) 
                $f->delete();
        }
    }

}
