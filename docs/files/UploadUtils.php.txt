<?php

/**
 * This file contains the UploadUtils class.
 */
namespace Mbcraft\Piol {

    /**
     * Helper class for file uploads. It has only static methods, and it's useful for obtaining
     * Upload instances. It's useful for managing file uploads.
     */
    class UploadUtils extends PiolObject {

        /**
         * 
         * Checks if there is uploaded files data to fetch.
         * 
         * @param array $data_ptr the $_FILES handler. It's not necessary to pass any parameter.
         * @return boolean true if there is uploaded data to fetch, false otherwise.
         * 
         * @api
         */
        public static function hasUploadedFiles(&$data_ptr = null) {
            if ($data_ptr==null)
                $data_ptr = &$_FILES;
            return !empty($data_ptr);
        }
        
        /**
         * 
         * Returns all uploaded files with nesting based on the form field names used.
         * 
         * @param array $data_ptr the $_FILES handler. It's not necessary to pass any parameter.
         * @return array an array with all the uploaded files data as Upload instances.
         * 
         * @api
         */
        public static function getUploadedFiles($data_ptr = null) {
            if ($data_ptr==null)
                $data_ptr = &$_FILES;
            return self::fetchFilesData($data_ptr);
        }
        
        /**
         * 
         * Recursively fetch $_FILES data and returns Upload instances correctly nested.
         * 
         * @param array $data_ptr pointer to the current array data
         * @return mixed data used to build the final array
         * 
         * @internal
         */
        private static function fetchFilesData($data_ptr) {
            if (isset($data_ptr["type"]) && isset($data_ptr["tmp_name"]) && (isset($data_ptr["error"]))) {
                if (is_array($data_ptr["tmp_name"]))
                    return self::fetchParallelUploadInstances($data_ptr);
                else
                    return self::fetchSingleUploadInstance($data_ptr);
            } 
            else
            {
                $result = array();
                foreach ($data_ptr as $key => $value) {
                    $result[$key] = self::fetchFilesData($value);
                }
                return $result;
            }
        }
        
        /**
         * 
         * Fetches parallels Upload instances from the current position inside the data array.
         * 
         * @param array $data_ptr a pointer to the data array ready for parallel Upload instances.
         * @return array an array of \Mbcraft\Piol\Upload instances.
         * 
         * @internal
         */
        private static function fetchParallelUploadInstances(&$data_ptr) {
            $results = array();
            foreach ($data_ptr["tmp_name"] as $key => $value) {
                $results[$key] = new Upload($data_ptr["name"][$key],$data_ptr["type"][$key],$data_ptr["tmp_name"][$key], $data_ptr["error"][$key], $data_ptr["size"][$key]);
            }
            return $results;
        }
        
        /**
         * 
         * Fetch a single Upload instance from the current position inside the data array.
         * 
         * @param array $data_ptr a pointer to the data array ready for one Upload instance.
         * @return \Mbcraft\Piol\Upload The builded Upload instance.
         * 
         * @internal
         */
        private static function fetchSingleUploadInstance(&$data_ptr) {
            return new Upload($data_ptr["name"], $data_ptr["type"], $data_ptr["tmp_name"], $data_ptr["error"], $data_ptr["size"]);
        }
    }

}
?>
